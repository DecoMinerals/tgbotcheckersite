import nest_asyncio
import logging
import requests
import asyncio
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# –†–∞–∑—Ä–µ—à–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ asyncio —Å–æ–±—ã—Ç–∏—è
nest_asyncio.apply()

# –¢–æ–∫–µ–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = '7487235916:AAFijvFJ_n1ip-EckW7jr1rFYqgZsDX7EGc'
CHAT_ID = '1911443016'

SITES = [
    "https://stevent.ru",
    "https://decominerals.ru",
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def check_sites():
    result = []
    for site in SITES:
        try:
            response = requests.get(site, timeout=10)
            if response.status_code == 200:
                status = "‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else:
                status = f"‚ö†Ô∏è –∫–æ–¥ {response.status_code}"
            logging.info(f"{site} ‚Äî {status}")
        except requests.exceptions.RequestException as e:
            status = f"‚ùå –æ—à–∏–±–∫–∞: {e}"
            logging.error(f"{site} ‚Äî {status}")
        result.append(f"{site} ‚Äî {status}")
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤
    keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã", callback_data="check")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤.", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    query = update.callback_query
    await query.answer()
    result = check_sites()
    await query.edit_message_text("\n".join(result))

async def background_check(app):
    # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    while True:
        logging.info("–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤")
        result = check_sites()
        if any("‚ùå" in r or "‚ö†Ô∏è" in r for r in result):
            await app.bot.send_message(chat_id=CHAT_ID, text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(result))
        await asyncio.sleep(300)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 –º–∏–Ω—É—Ç

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    asyncio.create_task(background_check(app))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    try:
        await app.run_polling()  # –ó–∞–ø—É—Å–∫ polling
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await app.bot.send_message(chat_id=CHAT_ID, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

if __name__ == "__main__":
    asyncio.run(main())
