import logging
import requests
import asyncio
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –¢–æ–∫–µ–Ω –∏ —á–∞—Ç ID –¥–ª—è –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
CHAT_ID = os.getenv('CHAT_ID')  # –ó–∞–≥—Ä—É–∂–∞–µ–º chat_id –∏–∑ .env

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SMTP_SERVER = os.getenv('SMTP_SERVER')
SMTP_PORT = os.getenv('SMTP_PORT')
SENDER_EMAIL = os.getenv('SENDER_EMAIL')  # –ó–∞–≥—Ä—É–∂–∞–µ–º email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
SENDER_PASSWORD = os.getenv('SENDER_PASSWORD')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ .env
RECEIVER_EMAIL = os.getenv('RECEIVER_EMAIL')  # –ó–∞–≥—Ä—É–∂–∞–µ–º email –ø–æ–ª—É—á–∞—Ç–µ–ª—è

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤
SITES = [
    "https://stevent.ru",
    "https://decominerals.ru",
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
def send_email(subject, body):
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MIME –¥–ª—è email
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ SMTP —Å–µ—Ä–≤–µ—Ä
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, RECEIVER_EMAIL, msg.as_string())
            logging.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤
def check_sites():
    result = []
    for site in SITES:
        try:
            response = requests.get(site, timeout=10)
            if response.status_code == 200:
                status = "‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else:
                status = f"‚ö†Ô∏è –∫–æ–¥ {response.status_code}"
            logging.info(f"{site} ‚Äî {status}")
        except requests.exceptions.RequestException as e:
            status = f"‚ùå –æ—à–∏–±–∫–∞: {e}"
            logging.error(f"{site} ‚Äî {status}")
        result.append(f"{site} ‚Äî {status}")
    return result

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes):
    keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã", callback_data="check")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤.", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button_handler(update: Update, context: ContextTypes):
    query = update.callback_query
    await query.answer()
    result = check_sites()
    await query.edit_message_text("\n".join(result))

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤
async def background_check(app):
    while True:
        logging.info("–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤")
        result = check_sites()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if any("‚ùå" in r or "‚ö†Ô∏è" in r for r in result):
            problems = "\n".join(result)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            send_email("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏", "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:\n" + problems)
            await app.bot.send_message(chat_id=CHAT_ID, text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:\n" + problems)
        await asyncio.sleep(300)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    asyncio.create_task(background_check(app))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.get_event_loop()

        # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        if loop.is_running():
            logging.warning("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            loop.create_task(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º —Ü–∏–∫–ª–µ
        else:
            loop.run_until_complete(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
