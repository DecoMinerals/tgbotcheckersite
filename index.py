# --- –í–ï–†–•–ù–Ø–Ø –ß–ê–°–¢–¨ –ù–ï –ú–ï–ù–Ø–õ–ê–°–¨ ---
import nest_asyncio
nest_asyncio.apply()

from datetime import datetime
import os
from dotenv import load_dotenv
import logging
import requests
import smtplib
import asyncio
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
SMTP_SERVER = os.getenv('SMTP_SERVER')
SMTP_PORT = int(os.getenv('SMTP_PORT', 587))
SENDER_EMAIL = os.getenv('SENDER_EMAIL')
SENDER_PASSWORD = os.getenv('SENDER_PASSWORD')
RECEIVER_EMAIL = os.getenv('RECEIVER_EMAIL')

SITES = [
    "https://decominerals.ru",
    "https://stevent.ru",
    "https://stevent.ru/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "https://hockey.decominerals.ru",
    "https://decofiltr.ru",
    "https://decomol.ru",
    "https://decoseeds.ru",
    "https://halofiltr.ru",
    "https://benteco.ru",
    "https://amitox.ru",
    "https://decoguard.ru",
    "https://decofield.pro",
    "https://decoorb.ru",
    "https://decoclear.ru",
    "https://decoarmor.ru",
    "https://decopool.pro",
    "https://decobase.pro",
    "https://decoessence.ru",
    "https://decobrew.ru",
    "https://decogrape.ru",
    "https://decopure.ru",
    "https://decoaqua.ru",
    "https://decobrights.ru",
    "https://stilldry.pro",
    "https://roaddry.ru",
    "https://decocopper.pro",
    "https://decotech.pro",
    "https://decofry.ru",
    "https://rfrp36.ru/"
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
print("‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
        logging.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {subject}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")

async def check_site(site):
    try:
        response = requests.get(site, timeout=10)
        if response.status_code == 200:
            return "ok"
        return f"warn ({response.status_code})"
    except requests.exceptions.RequestException:
        return "fail"

async def double_check_site(site):
    status1 = await check_site(site)
    if status1 == "ok":
        return status1
    await asyncio.sleep(3)
    return await check_site(site)

# –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π—Ç–æ–≤
site_statuses = {site: "unknown" for site in SITES}

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã", callback_data="check")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–Ω–∏—Ç–æ—Ä—é {len(SITES)} —Å–∞–π—Ç–æ–≤.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å.",
        reply_markup=reply_markup
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# --- –ü–†–û–í–ï–†–ö–ê –°–ê–ô–¢–û–í ---

async def perform_check(app, is_manual=False):
    global site_statuses
    message_lines = []
    restored_sites = []
    failed_sites = []
    warned_sites = []

    for site in SITES:
        new_status = await double_check_site(site)
        old_status = site_statuses.get(site, "unknown")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–≤–æ–¥–∞
        if new_status == "ok":
            status_text = "‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        elif "warn" in new_status:
            status_text = f"‚ö†Ô∏è –æ—à–∏–±–∫–∞: –∫–æ–¥ {new_status.split()[-1]}"
        else:
            status_text = "‚ùå —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if old_status != "ok" and new_status == "ok":
            restored_sites.append(site)

        # –°–±–æ—Ä –ø—Ä–æ–±–ª–µ–º
        if new_status == "fail":
            failed_sites.append(f"{site} ‚Äî {status_text}")
        elif "warn" in new_status:
            warned_sites.append(f"{site} ‚Äî {status_text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        site_statuses[site] = new_status
        message_lines.append(f"{site} ‚Äî {status_text}")

    # –°—É–º–º–∞—Ä–Ω–∞—è —à–∞–ø–∫–∞
    summary = f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(SITES)} —Å–∞–π—Ç–æ–≤\n"
    summary += f"‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(failed_sites)} | –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warned_sites)}\n"

    # –†–µ—à–∞–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if failed_sites or warned_sites:
        details = "\n".join(failed_sites + warned_sites)
    else:
        details = "\n".join(message_lines)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    if len(details) > 3800:
        details = details[:3800] + "\n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ Telegram"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    final_message = summary + "\n\n" + details

    if is_manual:
        await app.bot.send_message(chat_id=CHAT_ID, text=final_message, reply_markup=reply_markup)
    else:
        if failed_sites:
            await app.bot.send_message(chat_id=CHAT_ID, text=final_message, reply_markup=reply_markup, disable_notification=False)
            send_email("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ —Å–∞–π—Ç–æ–≤", final_message)
        elif warned_sites:
            await app.bot.send_message(chat_id=CHAT_ID, text=final_message, reply_markup=reply_markup, disable_notification=True)
            send_email("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ —Å–∞–π—Ç–∞–º", final_message)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
    if restored_sites:
        restored_text = "üü¢ –°–∞–π—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n" + "\n".join(restored_sites)
        await app.bot.send_message(chat_id=CHAT_ID, text=restored_text, disable_notification=True)
        logging.info(f"–°–∞–π—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {restored_sites}")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚è≥ –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await perform_check(context.application, is_manual=True)

async def background_check(app):
    while True:
        await perform_check(app)
        await asyncio.sleep(60)

async def health_check(app):
    while True:
        try:
            await app.bot.get_me()
            logging.info("‚úÖ Health check: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            msg = f"‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}"
            logging.error(msg)
            try:
                await app.bot.send_message(chat_id=CHAT_ID, text=msg)
                send_email("üö® –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", msg)
            except:
                pass
        await asyncio.sleep(600)

# --- –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ---

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CallbackQueryHandler(button_handler))
    asyncio.create_task(background_check(app))
    asyncio.create_task(health_check(app))
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
