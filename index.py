import nest_asyncio
nest_asyncio.apply()

from datetime import datetime
import os
import logging
import requests
import smtplib
import asyncio
from dotenv import load_dotenv
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
SMTP_SERVER = os.getenv('SMTP_SERVER')
SMTP_PORT = int(os.getenv('SMTP_PORT', 587))
SENDER_EMAIL = os.getenv('SENDER_EMAIL')
SENDER_PASSWORD = os.getenv('SENDER_PASSWORD')
RECEIVER_EMAIL = os.getenv('RECEIVER_EMAIL')

# --- –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ ---
SITES = [
    "https://decominerals.ru",
    "https://stevent.ru",
    "https://stevent.ru/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "https://hockey.decominerals.ru",
    "https://decofiltr.ru",
    "https://decomol.ru",
    "https://decoseeds.ru",
    "https://halofiltr.ru",
    "https://benteco.ru",
    "https://amitox.ru",
    "https://decoguard.ru",
    "https://decofield.pro",
    "https://decoorb.ru",
    "https://decoclear.ru",
    "https://decoarmor.ru",
    "https://decopool.pro",
    "https://decobase.pro",
    "https://decoessence.ru",
    "https://decobrew.ru",
    "https://decogrape.ru",
    "https://decopure.ru",
    "https://decoaqua.ru",
    "https://decobrights.ru",
    "https://stilldry.pro",
    "https://roaddry.ru",
    "https://decocopper.pro",
    "https://decotech.pro",
    "https://decofry.ru",
    "https://rfrp36.ru/"
]

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

print("‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# --- Email –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain', 'utf-8'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
            logging.info(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
            print(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
        raise  # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ

# --- –ü–∞—Ä–æ–ª—å –¥–ª—è –±–æ—Ç–∞ ---
PASSWORD = os.getenv('PASSBOT')
is_authenticated = False

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authenticated:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞")
    else:
        keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã", callback_data="check")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {len(SITES)} —Å–∞–π—Ç–æ–≤.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å.",
            reply_markup=reply_markup
        )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è ---
async def password_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_authenticated
    password_input = update.message.text
    if password_input == PASSWORD:
        is_authenticated = True
        await update.message.reply_text("üîì –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
        await start(update, context)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ /start –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –ö–æ–º–∞–Ω–¥–∞ /ping ---
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é ---
def check_sites():
    result = []
    for site in SITES:
        try:
            response = requests.get(site, timeout=10)
            if response.status_code == 200:
                status = f"‚úÖ {site} —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else:
                status = f"‚ö†Ô∏è {site} –∫–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}"
            logging.info(f"{site} ‚Äî {status}")
        except requests.exceptions.RequestException as e:
            status = f"‚ùå {site} –æ—à–∏–±–∫–∞: {e}"
            logging.error(f"{site} ‚Äî {status}")
        result.append(status)
    return result

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–±–ª–µ–º ---
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authenticated:
        await update.message.reply_text(
    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞. ||–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º||",
    parse_mode="MarkdownV2"
        )
        return

    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç—ã...")

    result = check_sites()

    # –í—Å–µ —Å–∞–π—Ç—ã —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º
    all_sites = "\n".join(result)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    message = (
        f"üîç –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã:\n\n{all_sites}\n\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}"
    )

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –µ–≥–æ –æ–±—Ä–µ–∑–∞–µ–º
    if len(message) > 4000:
        message = message[:4000] + "\n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    keyboard = [[InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup)



# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API ---
async def health_check(app):
    while True:
        try:
            await app.bot.get_me()
            logging.info("‚úÖ –ë–æ—Ç –∂–∏–≤ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç Telegram API")
        except Exception as e:
            logging.error(f"‚ùå Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            try:
                await app.bot.send_message(chat_id=CHAT_ID, text="üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram API!")
            except Exception:
                pass
            try:
                send_email("üö® –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", f"–û—à–∏–±–∫–∞: {e}")
            except Exception:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –æ —Å–±–æ–µ –±–æ—Ç–∞")
        await asyncio.sleep(600)

# --- –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ ---
status_cache = {}

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async def background_check(app):
    global status_cache

    while True:
        logging.info("üåê –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤...")
        current_status = {}

        for site in SITES:
            try:
                response = requests.get(site, timeout=10)
                if response.status_code == 200:
                    current_status[site] = "‚úÖ"
                elif response.status_code >= 500:
                    current_status[site] = f"‚ùå {response.status_code}"  # –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ –æ—à–∏–±–∫–∏
                else:
                    current_status[site] = f"‚ö†Ô∏è {response.status_code}"  # –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ –æ—à–∏–±–∫–∏
            except Exception as e:
                current_status[site] = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"  # –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏

        # –ù–∞–π–¥—ë–º –ø—Ä–æ–±–ª–µ–º—ã
        problem_sites = [f"{site} ‚Äî {current_status[site]}" for site in current_status if current_status[site] in ("‚ùå", "‚ö†Ô∏è")]

        # –ù–∞–π–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
        recovered_sites = [
            site for site in current_status
            if status_cache.get(site) in ("‚ùå", "‚ö†Ô∏è") and current_status[site] == "‚úÖ"
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        status_cache = current_status.copy()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if problem_sites:
            if is_authenticated:
                msg = (
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n"
                    f"–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: \n"
                    f"üïì {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n" +
                    "\n".join(problem_sites)
                )

                try:
                    logging.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {msg}")
                    await app.bot.send_message(chat_id=CHAT_ID, text=msg[:4000])
                    send_email("‚ùó –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏", msg)
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
                    logging.error(error_msg)
                    await app.bot.send_message(chat_id=CHAT_ID, text=error_msg)

                    # –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º –æ—à–∏–±–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        send_email("‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email", error_msg)
                    except Exception as email_error:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö: {email_error}")
            else:
                logging.info("üîí –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ (–±–µ–∑ –∑–≤—É–∫–∞)
        if recovered_sites:
            if is_authenticated:
                msg = f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å:\n" + "\n".join(recovered_sites)
                logging.info(f"üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {msg}")
                await app.bot.send_message(chat_id=CHAT_ID, text=msg, disable_notification=True)
            else:
                logging.info("üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        await asyncio.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, password_check))

    asyncio.create_task(background_check(app))
    asyncio.create_task(health_check(app))

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
