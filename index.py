import requests
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
import logging
import asyncio
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, ContextTypes

# –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
SITES = [
    'https://decominerals.ru',
    'https://stevent.ru',
    'https://stevent.ru/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    'https://hockey.decominerals.ru',
    'https://decofiltr.ru',
    'https://decomol.ru',
    'https://decoseeds.ru',
    'https://halofiltr.ru'
]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Email
SENDER_EMAIL = 'your-email@example.com'
RECEIVER_EMAIL = 'receiver-email@example.com'
SMTP_SERVER = 'smtp.example.com'
SMTP_PORT = 587
SENDER_PASSWORD = 'your-email-password'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS —Å–∞–π—Ç–∞
def check_dns(site):
    try:
        requests.get(site, timeout=5)
        return True
    except requests.exceptions.RequestException:
        return False

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é ---
def check_sites():
    result = []
    for site in SITES:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            if not check_dns(site):
                status = f"‚ùå {site} DNS –æ—à–∏–±–∫–∞"
                result.append(status)
                continue

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
            }

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å
                response = requests.head(site, headers=headers, timeout=15, allow_redirects=True)
                if response.status_code == 405:  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ HEAD –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    response = requests.get(site, headers=headers, timeout=15, allow_redirects=True)
            except requests.exceptions.SSLError:
                # –ï—Å–ª–∏ SSL –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                response = requests.get(site, headers=headers, timeout=15, allow_redirects=True, verify=False)
            except:
                response = requests.get(site, headers=headers, timeout=15, allow_redirects=True)

            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                status = f"‚úÖ {site} —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥ {response.status_code})"
            elif 300 <= response.status_code < 400:
                status = f"‚ö†Ô∏è {site} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–æ–¥ {response.status_code})"
            elif 400 <= response.status_code < 500:
                status = f"‚ùå {site} –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {response.status_code})"
            else:
                status = f"‚ùå {site} —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {response.status_code})"

        except requests.exceptions.SSLError as e:
            status = f"‚ö†Ô∏è {site} –æ—à–∏–±–∫–∞ SSL: {str(e)}"
        except requests.exceptions.Timeout:
            status = f"‚ö†Ô∏è {site} —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        except requests.exceptions.ConnectionError:
            status = f"‚ùå {site} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        except requests.exceptions.RequestException as e:
            status = f"‚ùå {site} –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        except Exception as e:
            status = f"‚ùå {site} –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            
        logging.info(f"{site} ‚Äî {status}")
        result.append(status)
    return result


# --- Email –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö ---
def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'html', 'utf-8'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
            logging.info(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
            print(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
        raise


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        if not is_authenticated:
            await query.edit_message_text(
                r"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞\." + "\n" +
                r"||–ü–æ–¥—Å–∫–∞–∑–∫–∞\: —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º||",
                parse_mode="MarkdownV2"
            )
            return

        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç—ã...")
        result = check_sites()
        all_sites = "\n".join(result)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        problem_sites = [status for status in result if "‚ùå" in status or "‚ö†Ô∏è" in status]

        if problem_sites:
            message = (
                f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n\n"
                f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}\n\n"
                f"{'\n'.join(problem_sites)}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Email —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            send_email("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏", message)
        else:
            message = (
                f"‚úÖ –í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n\n"
                f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}\n"
                "–í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!"
            )

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(message) > 4000:
            message = message[:4000] + "\n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ"

        keyboard = [[InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    except telegram.error.BadRequest as e:
        if "Query is too old" in str(e):
            logging.warning("Callback query expired - ignoring")
            return
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        raise


# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) ---
async def background_check(app):
    global status_cache
    logging.info("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")

    while True:
        try:
            logging.info("üîç –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–æ–≤...")
            current_status = {}

            for site in SITES:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
                    if not check_dns(site):
                        current_status[site] = "‚ùå DNS –æ—à–∏–±–∫–∞"
                        continue

                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                    }

                    # –ü—Ä–æ–±—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å —Å–Ω–∞—á–∞–ª–∞
                    try:
                        response = requests.head(site, headers=headers, timeout=20, allow_redirects=True)
                        if response.status_code == 405:  # HEAD –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                            response = requests.get(site, headers=headers, timeout=20, allow_redirects=True)
                    except requests.exceptions.SSLError:
                        response = requests.get(site, headers=headers, timeout=20, allow_redirects=True, verify=False)
                    except:
                        response = requests.get(site, headers=headers, timeout=20, allow_redirects=True)

                    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if response.status_code == 200:
                        current_status[site] = f"‚úÖ {site} —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥ {response.status_code})"
                    elif 300 <= response.status_code < 400:
                        current_status[site] = f"‚ö†Ô∏è {site} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({response.status_code})"
                    elif 400 <= response.status_code < 500:
                        current_status[site] = f"‚ùå {site} –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ ({response.status_code})"
                    else:
                        current_status[site] = f"‚ùå {site} —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ ({response.status_code})"

                except requests.exceptions.SSLError:
                    current_status[site] = f"‚ö†Ô∏è {site} –æ—à–∏–±–∫–∞ SSL"
                except requests.exceptions.Timeout:
                    current_status[site] = f"‚ö†Ô∏è {site} —Ç–∞–π–º–∞—É—Ç"
                except requests.exceptions.ConnectionError:
                    current_status[site] = f"‚ùå {site} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                except Exception as e:
                    current_status[site] = f"‚ùå {site} –æ—à–∏–±–∫–∞: {str(e)}"

                logging.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω {site}: {current_status[site]}")
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
            problem_sites = [
                f"{site} ‚Äî {status}" 
                for site, status in current_status.items() 
                if "‚ùå" in status or "‚ö†Ô∏è" in status
            ]

            if problem_sites:
                msg = (
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n\n"
                    f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n" +
                    "\n".join(problem_sites)
                )
                try:
                    await app.bot.send_message(
                        chat_id=CHAT_ID,
                        text=msg[:4000],
                        disable_notification=False
                    )
                    logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    send_email("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏", msg)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            else:
                # –í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                msg = (
                    f"‚úÖ –í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n\n"
                    f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    "–í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!"
                )
                try:
                    await app.bot.send_message(
                        chat_id=CHAT_ID,
                        text=msg[:4000],
                        disable_notification=True  # –ë–µ–∑ –∑–≤—É–∫–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    )
                    logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å–∞–π—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    send_email("–í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", msg)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
