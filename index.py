import nest_asyncio
nest_asyncio.apply()

from datetime import datetime
import os
import logging
import requests
import smtplib
import asyncio
import telegram
import socket
from urllib.parse import urlparse
from dotenv import load_dotenv
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
SMTP_SERVER = os.getenv('SMTP_SERVER')
SMTP_PORT = int(os.getenv('SMTP_PORT', 587))
SENDER_EMAIL = os.getenv('SENDER_EMAIL')
SENDER_PASSWORD = os.getenv('SENDER_PASSWORD')
RECEIVER_EMAIL = os.getenv('RECEIVER_EMAIL')

# --- –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ ---
SITES = [
    "https://decominerals.ru",
    "https://stevent.ru",
    "https://stevent.ru/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "https://hockey.decominerals.ru",
    "https://decofiltr.ru",
    "https://decomol.ru",
    "https://decoseeds.ru",
    "https://halofiltr.ru",
    "https://benteco.ru",
    "https://amitox.ru",
    "https://decoguard.ru",
    "https://decofield.pro",
    "https://decoorb.ru",
    "https://decoclear.ru",
    "https://decoarmor.ru",
    "https://decopool.pro",
    "https://decobase.pro",
    "https://decoessence.ru",
    "https://decobrew.ru",
    "https://decogrape.ru",
    "https://decopure.ru",
    "https://decoaqua.ru",
    "https://decobrights.ru",
    "https://stilldry.pro",
    "https://roaddry.ru",
    "https://decocopper.pro",
    "https://decotech.pro",
    "https://decofry.ru",
    "https://rfrp36.ru/"
]

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

print("‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# --- Email –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'html', 'utf-8'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
            logging.info(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
            print(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
        raise

# --- –ü–∞—Ä–æ–ª—å –¥–ª—è –±–æ—Ç–∞ ---
PASSWORD = os.getenv('PASSBOT')
is_authenticated = False

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authenticated:
        await update.message.reply_text(
            r"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞\." + "\n" +
            r"||–ü–æ–¥—Å–∫–∞–∑–∫–∞\: —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º||",
            parse_mode="MarkdownV2"
        )
    else:
        keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã", callback_data="check")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {len(SITES)} —Å–∞–π—Ç–æ–≤.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å.",
            reply_markup=reply_markup
        )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è ---
async def password_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_authenticated
    password_input = update.message.text
    if password_input == PASSWORD:
        is_authenticated = True
        await update.message.reply_text("üîì –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
        await start(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –ö–æ–º–∞–Ω–¥–∞ /ping ---
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS ---
def check_dns(url):
    try:
        domain = urlparse(url).hostname
        socket.gethostbyname(domain)
        return True
    except socket.gaierror:
        return False

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é ---
def check_sites():
    result = []
    for site in SITES:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            if not check_dns(site):
                status = f"‚ùå {site} DNS –æ—à–∏–±–∫–∞"
                result.append(status)
                continue

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
            }

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å
                response = requests.head(site, headers=headers, timeout=15, allow_redirects=True)
                if response.status_code == 405:  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ HEAD –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    response = requests.get(site, headers=headers, timeout=15, allow_redirects=True)
            except requests.exceptions.SSLError:
                # –ï—Å–ª–∏ SSL –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                response = requests.get(site, headers=headers, timeout=15, allow_redirects=True, verify=False)
            except:
                response = requests.get(site, headers=headers, timeout=15, allow_redirects=True)

            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                status = f"‚úÖ {site} —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥ {response.status_code})"
            elif 300 <= response.status_code < 400:
                status = f"‚ö†Ô∏è {site} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–æ–¥ {response.status_code})"
            elif 400 <= response.status_code < 500:
                status = f"‚ö†Ô∏è {site} –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {response.status_code})"
            else:
                status = f"‚ùå {site} —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {response.status_code})"

        except requests.exceptions.SSLError as e:
            status = f"‚ö†Ô∏è {site} –æ—à–∏–±–∫–∞ SSL: {str(e)}"
        except requests.exceptions.Timeout:
            status = f"‚ö†Ô∏è {site} —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        except requests.exceptions.ConnectionError:
            status = f"‚ùå {site} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        except requests.exceptions.RequestException as e:
            status = f"‚ùå {site} –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        except Exception as e:
            status = f"‚ùå {site} –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            
        logging.info(f"{site} ‚Äî {status}")
        result.append(status)
    return result

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        if not is_authenticated:
            await query.edit_message_text(
                r"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞\." + "\n" +
                r"||–ü–æ–¥—Å–∫–∞–∑–∫–∞\: —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º||",
                parse_mode="MarkdownV2"
            )
            return

        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç—ã...")
        result = check_sites()
        all_sites = "\n".join(result)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
        message = (
            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n\n"
            f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}\n\n"
            f"{all_sites}"
        )

        if len(message) > 4000:
            message = message[:4000] + "\n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ"

        keyboard = [[InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    except telegram.error.BadRequest as e:
        if "Query is too old" in str(e):
            logging.warning("Callback query expired - ignoring")
            return
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        raise

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API ---
async def health_check(app):
    while True:
        try:
            await app.bot.get_me()
            logging.info("‚úÖ –ë–æ—Ç –∂–∏–≤ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç Telegram API")
        except Exception as e:
            logging.error(f"‚ùå Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            try:
                await app.bot.send_message(chat_id=CHAT_ID, text="üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram API!")
            except Exception:
                pass
            try:
                send_email("üö® –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", f"–û—à–∏–±–∫–∞: {e}")
            except Exception:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –æ —Å–±–æ–µ –±–æ—Ç–∞")
        await asyncio.sleep(1200)  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

# --- –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ ---
status_cache = {}

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async def background_check(app):
    global status_cache
    logging.info("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")

    while True:
        try:
            logging.info("üîç –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–æ–≤...")
            current_status = {}

            for site in SITES:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
                    if not check_dns(site):
                        current_status[site] = "‚ùå DNS –æ—à–∏–±–∫–∞"
                        continue

                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                    }

                    # –ü—Ä–æ–±—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å —Å–Ω–∞—á–∞–ª–∞
                    try:
                        response = requests.head(site, headers=headers, timeout=20, allow_redirects=True)
                        if response.status_code == 405:  # HEAD –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                            response = requests.get(site, headers=headers, timeout=20, allow_redirects=True)
                    except requests.exceptions.SSLError:
                        response = requests.get(site, headers=headers, timeout=20, allow_redirects=True, verify=False)
                    except:
                        response = requests.get(site, headers=headers, timeout=20, allow_redirects=True)

                    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if response.status_code == 200:
                        current_status[site] = f"‚úÖ {site} —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥ {response.status_code})"
                    elif 300 <= response.status_code < 400:
                        current_status[site] = f"‚ö†Ô∏è {site} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({response.status_code})"
                    elif 400 <= response.status_code < 500:
                        current_status[site] = f"‚ö†Ô∏è {site} –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ ({response.status_code})"
                    else:
                        current_status[site] = f"‚ùå {site} —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ ({response.status_code})"

                except requests.exceptions.SSLError:
                    current_status[site] = f"‚ö†Ô∏è {site} –æ—à–∏–±–∫–∞ SSL"
                except requests.exceptions.Timeout:
                    current_status[site] = f"‚ö†Ô∏è {site} —Ç–∞–π–º–∞—É—Ç"
                except requests.exceptions.ConnectionError:
                    current_status[site] = f"‚ùå {site} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                except Exception as e:
                    current_status[site] = f"‚ùå {site} –æ—à–∏–±–∫–∞: {str(e)}"

                logging.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω {site}: {current_status[site]}")
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
            problem_sites = [
                f"{site} ‚Äî {status}" 
                for site, status in current_status.items() 
                if "‚ùå" in status or "‚ö†Ô∏è" in status
            ]

            if problem_sites:
                msg = (
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n\n"
                    f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n" +
                    "\n".join(problem_sites)
                )
                try:
                    await app.bot.send_message(
                        chat_id=CHAT_ID,
                        text=msg[:4000],
                        disable_notification=False
                    )
                    logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    send_email("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏", msg)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

            status_cache = current_status
            await asyncio.sleep(600)  # –ü–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        test = requests.get('https://google.com', timeout=10)
        if test.status_code != 200:
            logging.error("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            return
    except Exception as e:
        logging.error(f"‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, password_check))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    asyncio.create_task(background_check(app))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram API
    asyncio.create_task(health_check(app))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
