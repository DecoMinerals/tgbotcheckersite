import nest_asyncio
nest_asyncio.apply()

from datetime import datetime
import os
import logging
import requests
import smtplib
import asyncio
import telegram
import socket
from urllib.parse import urlparse
from dotenv import load_dotenv
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
SMTP_SERVER = os.getenv('SMTP_SERVER')
SMTP_PORT = int(os.getenv('SMTP_PORT', 587))
SENDER_EMAIL = os.getenv('SENDER_EMAIL')
SENDER_PASSWORD = os.getenv('SENDER_PASSWORD')
RECEIVER_EMAIL = os.getenv('RECEIVER_EMAIL')
PASSWORD = os.getenv('PASSBOT')

# --- –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ ---
SITES = [
    "https://decominerals.ru",
    "https://stevent.ru",
    "https://stevent.ru/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "https://hockey.decominerals.ru",
    "https://decofiltr.ru",
    "https://decomol.ru",
    "https://decoseeds.ru",
    "https://halofiltr.ru",
    "https://benteco.ru",
    "https://amitox.ru",
    "https://decoguard.ru",
    "https://decofield.pro",
    "https://decoorb.ru",
    "https://decoclear.ru",
    "https://decoarmor.ru",
    "https://decopool.pro",
    "https://decobase.pro",
    "https://decoessence.ru",
    "https://decobrew.ru",
    "https://decogrape.ru",
    "https://decopure.ru",
    "https://decoaqua.ru",
    "https://decobrights.ru",
    "https://stilldry.pro",
    "https://roaddry.ru",
    "https://decocopper.pro",
    "https://decotech.pro",
    "https://decofry.ru",
]

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

print("‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# --- Email ---
def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = RECEIVER_EMAIL
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'html', 'utf-8'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
            logging.info(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {RECEIVER_EMAIL}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
        raise

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
is_authenticated = False

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authenticated:
        await update.message.reply_text(
            r"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞\." + "\n" +
            r"||–ü–æ–¥—Å–∫–∞–∑–∫–∞\: —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º||",
            parse_mode="MarkdownV2"
        )
    else:
        keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç—ã", callback_data="check")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {len(SITES)} —Å–∞–π—Ç–æ–≤.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å.",
            reply_markup=reply_markup
        )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è ---
async def password_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_authenticated
    if update.message.text == PASSWORD:
        is_authenticated = True
        await update.message.reply_text("üîì –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
        await start(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- DNS ---
def check_dns(url):
    try:
        domain = urlparse(url).hostname
        socket.gethostbyname(domain)
        return True
    except socket.gaierror:
        return False

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ ---
def check_sites():
    result = []
    for site in SITES:
        try:
            if not check_dns(site):
                result.append(f"‚ùå {site} DNS –æ—à–∏–±–∫–∞")
                continue

            headers = {
                'User-Agent': 'Mozilla/5.0',
                'Accept': 'text/html'
            }

            try:
                response = requests.head(site, headers=headers, timeout=15, allow_redirects=True)
                if response.status_code == 405:
                    response = requests.get(site, headers=headers, timeout=15, allow_redirects=True)
            except requests.exceptions.SSLError:
                response = requests.get(site, headers=headers, timeout=15, allow_redirects=True, verify=False)
            except:
                response = requests.get(site, headers=headers, timeout=15, allow_redirects=True)

            if response.status_code == 200:
                result.append(f"‚úÖ {site} —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥ {response.status_code})")
            elif 300 <= response.status_code < 400:
                result.append(f"‚ö†Ô∏è {site} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–æ–¥ {response.status_code})")
            elif 400 <= response.status_code < 500:
                result.append(f"‚ùå {site} –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {response.status_code})")
            else:
                result.append(f"‚ùå {site} —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {response.status_code})")

        except requests.exceptions.SSLError as e:
            result.append(f"‚ö†Ô∏è {site} –æ—à–∏–±–∫–∞ SSL: {str(e)}")
        except requests.exceptions.Timeout:
            result.append(f"‚ö†Ô∏è {site} —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except requests.exceptions.ConnectionError:
            result.append(f"‚ùå {site} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except Exception as e:
            result.append(f"‚ùå {site} –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    return result

# --- Email –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö ---
def send_email_if_needed(statuses):
    problem_sites = [status for status in statuses if "‚ùå" in status or "‚ö†Ô∏è" in status]
    if problem_sites:
        message = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n\n" + "\n".join(problem_sites)
        send_email("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏", message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not is_authenticated:
        await query.edit_message_text(
            r"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞\." + "\n" +
            r"||–ü–æ–¥—Å–∫–∞–∑–∫–∞\: —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º||",
            parse_mode="MarkdownV2"
        )
        return

    await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç—ã...")
    result = check_sites()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    problem_sites = [s for s in result if "‚ùå" in s or "‚ö†Ô∏è" in s]

    if problem_sites:
        message = (
            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n\n"
            f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}\n\n" +
            "\n".join(problem_sites)
        )
        send_email_if_needed(result)
    else:
        message = (
            f"‚úÖ –í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n\n"
            f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}\n"
            "–í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!"
        )

    if len(message) > 4000:
        message = message[:4000] + "\n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ"

    keyboard = [[InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async def background_check(app):
    logging.info("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    while True:
        try:
            result = check_sites()
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            problem_sites = [s for s in result if "‚ùå" in s or "‚ö†Ô∏è" in s]

            if problem_sites:
                msg = (
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n\n"
                    f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}\n\n" +
                    "\n".join(problem_sites)
                )
                await app.bot.send_message(chat_id=CHAT_ID, text=msg[:4000])
                send_email("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏", msg)
            else:
                msg = (
                    f"‚úÖ –í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n\n"
                    f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}\n"
                    "–í—Å–µ —Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!"
                )
                await app.bot.send_message(chat_id=CHAT_ID, text=msg[:4000], disable_notification=True)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")

        await asyncio.sleep(60 * 5)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, password_check))
    application.add_handler(CallbackQueryHandler(button_handler))

    loop = asyncio.get_event_loop()
    loop.create_task(background_check(application))

    application.run_polling()
